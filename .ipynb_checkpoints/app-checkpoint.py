# app.py - Versi√≥n Final y Completa (con √≠ndice_competitividad)

import streamlit as st
import geopandas as gpd
import os
from sqlalchemy import create_engine
from langchain_openai import ChatOpenAI
from langchain.agents import create_sql_agent
from langchain_community.utilities import SQLDatabase
from streamlit_folium import st_folium
from pathlib import Path
import folium

# --- 1. Configuraci√≥n de la P√°gina ---
st.set_page_config(
    page_title="An√°lisis Electoral Manzanillo",
    page_icon="üó≥Ô∏è",
    layout="wide"
)

# --- 2. Funciones de Carga y L√≥gica (Cacheadas para Rendimiento) ---

@st.cache_data
def generar_perfil_seccion(fila, umbrales):
    """Genera una descripci√≥n textual del perfil de una secci√≥n electoral usando umbrales pre-calculados."""
    perfiles = []
    if fila['porc_jovenes'] > umbrales['J√≥venes']: perfiles.append("J√≥venes")
    if fila['porc_poblacion_migrante'] > umbrales['Migrantes']: perfiles.append("Migrantes")
    if fila['GRAPROES'] > umbrales['Alta Escolaridad']: perfiles.append("Alta Escolaridad")
    if fila['porc_adultos_mayores'] > umbrales['Adultos Mayores']: perfiles.append("Adultos Mayores")
    if fila['indice_digitalizacion'] > umbrales['Alta Digitalizaci√≥n']: perfiles.append("Alta Digitalizaci√≥n")
    return "Predominantemente " + ", ".join(perfiles) if perfiles else "Perfil Mixto / Promedio"

@st.cache_data
def cargar_y_perfilar_datos(ruta_archivo):
    """Carga los datos y aplica el perfilamiento de forma optimizada."""
    try:
        gdf = gpd.read_file(ruta_archivo).to_crs("EPSG:4326")

        # --- NUEVO: Crear √≠ndice de competitividad ---
        gdf['indice_competitividad'] = 100 - gdf['competitividad']

        umbrales = {
            'J√≥venes': gdf['porc_jovenes'].quantile(0.70),
            'Migrantes': gdf['porc_poblacion_migrante'].quantile(0.70),
            'Alta Escolaridad': gdf['GRAPROES'].quantile(0.70),
            'Adultos Mayores': gdf['porc_adultos_mayores'].quantile(0.70),
            'Alta Digitalizaci√≥n': gdf['indice_digitalizacion'].quantile(0.70),
        }
        gdf['perfil_descriptivo'] = gdf.apply(generar_perfil_seccion, axis=1, umbrales=umbrales)
        return gdf
    except Exception as e:
        st.error(f"Error al cargar y perfilar los datos: {e}")
        return None

@st.cache_resource
def inicializar_agente(_df):
    """Inicializa la DB y el agente SQL con el prompt estrat√©gico."""
    try:
        df_analisis = _df.drop(columns=['geometry'], errors='ignore')
        engine = create_engine('sqlite:///manzanillo_data.db')
        df_analisis.to_sql('secciones', engine, index=False, if_exists='replace')
        db = SQLDatabase(engine=engine)
        llm = ChatOpenAI(model="gpt-4o", temperature=0.1)
        
        # --- INICIO DEL PROMPT COMPLETO Y RESTAURADO ---
        prompt_personalizado = """
### Persona y Tarea Principal
Eres "Analista Pol√≠tico Estrat√©gico", un asistente de IA experto en el an√°lisis de datos electorales y sociodemogr√°ficos de Manzanillo, Colima.
Tu √∫nica tarea es responder a las preguntas del usuario generando y ejecutando consultas SQL sobre una tabla llamada 'secciones', y luego interpretar los resultados de forma clara y anal√≠tica.

### Diccionario de Datos Clave
Aqu√≠ tienes el significado de las columnas m√°s importantes para tu an√°lisis:
- seccion: El identificador √∫nico de la secci√≥n electoral.
- partido_dominante: El partido pol√≠tico con m√°s votos hist√≥ricos en la secci√≥n.
- pct_voto_morena, pct_voto_oposicion: Porcentaje de votos para Morena y la oposici√≥n.
- tasa_participacion_promedio: Porcentaje de ciudadanos registrados que votan. Es un indicador clave de compromiso c√≠vico.
- indice_competitividad: Un puntaje de 0 a 100 que mide qu√© tan re√±ida es una elecci√≥n. IMPORTANTE: un valor ALTO (cercano a 100) significa MUY COMPETITIVO. Un valor BAJO significa que un partido domina.
- porc_jovenes: Porcentaje de la poblaci√≥n entre 18 y 24 a√±os.
- porc_adultos_mayores: Porcentaje de la poblaci√≥n mayor a 65 a√±os.
- indice_digitalizacion: Un puntaje de 0 a 100 que mide la adopci√≥n tecnol√≥gica (internet, PC, celular). Es un indicador de modernidad.
- GRAPROES: Grado promedio de escolaridad en a√±os. Un indicador socioecon√≥mico clave.
- porc_hogares_jefa_mujer: Porcentaje de hogares liderados por una mujer.
- porc_poblacion_migrante: Porcentaje de residentes nacidos fuera de Colima. Indica arraigo comunitario o dinamismo poblacional.
- tasa_desocupacion: Porcentaje de la poblaci√≥n econ√≥micamente activa que est√° desempleada.
- porc_sin_servicios_salud: Porcentaje de la poblaci√≥n sin acceso a servicios de salud. Un indicador clave de vulnerabilidad.

### Instrucciones de Salida
1. Analiza la pregunta del usuario para entender su intenci√≥n estrat√©gica.
2. Usa el diccionario de datos para elegir las mejores columnas para tu consulta SQL.
3. Genera una consulta SQL en dialecto SQLite.
4. Una vez que tengas los resultados, no te limite a mostrarlos. Escribe un resumen ejecutivo en espa√±ol, explicando los hallazgos y dando recomendaciones pr√°cticas de estrategia electoral o pol√≠tica p√∫blica.
5. Si presentas una lista de secciones, usa un formato de vi√±etas (bullets).
6. Siempre responde en espa√±ol y act√∫a como un analista pol√≠tico experimentado.
"""
        # --- FIN DEL PROMPT ---
        
        agente = create_sql_agent(llm=llm, db=db, agent_type="openai-tools", verbose=False, prompt_suffix=prompt_personalizado)
        return agente
    except Exception as e:
        st.error(f"Error al inicializar el agente LLM: {e}")
        return None

# --- 3. APLICACI√ìN PRINCIPAL ---

st.title("Prototipo de Inteligencia Electoral: Manzanillo")
st.markdown("Analiza datos seccionales con mapas interactivos, KPIs y consultas inteligentes con IA.")


DIRECTORIO_SCRIPT = Path(__file__).parent
RUTA_DATOS_FINAL = DIRECTORIO_SCRIPT / "1_datos" / "02_procesados" / "gdf_final_auditado.gpkg"
gdf_data = cargar_y_perfilar_datos(RUTA_DATOS_FINAL)

if gdf_data is not None:
    
    with st.sidebar:
        st.header("üéõÔ∏è Controles del Mapa")
        perfiles_unicos = sorted(gdf_data['perfil_descriptivo'].unique())
        opciones_filtro = ["‚Äî Mostrar Todas las Secciones ‚Äî"] + perfiles_unicos
        perfil_seleccionado = st.selectbox("Filtrar por Perfil Sociodemogr√°fico:", options=opciones_filtro)
        st.caption("Selecciona un perfil para aislarlo en el mapa.")
        st.divider()
        opciones_visualizacion = {
            'Tasa de Participaci√≥n (%)': 'tasa_participacion_promedio',
            'Porcentaje Voto Morena': 'pct_voto_morena',
            '√çndice de Competitividad': 'indice_competitividad',  # <--- Nuevo √≠ndice
            '√çndice de Digitalizaci√≥n': 'indice_digitalizacion',
        }
        opcion_seleccionada_nombre = st.selectbox("Variable a visualizar:", options=list(opciones_visualizacion.keys()))
        columna_a_visualizar = opciones_visualizacion[opcion_seleccionada_nombre]
        st.divider()
        st.header("üìå Detalle de Secci√≥n")
        detalle_placeholder = st.empty()

    if perfil_seleccionado == "‚Äî Mostrar Todas las Secciones ‚Äî":
        gdf_filtrado = gdf_data
    else:
        gdf_filtrado = gdf_data[gdf_data['perfil_descriptivo'] == perfil_seleccionado]

    col_mapa, col_chat = st.columns([2, 1])

    with col_mapa:
        st.subheader("üó∫Ô∏è Exploraci√≥n Geoespacial")
        st.info(f"Mostrando **{len(gdf_filtrado)}** de **{len(gdf_data)}** secciones.")
        m = gdf_filtrado.explore(
            column=columna_a_visualizar, cmap='plasma', tooltip=['seccion', 'perfil_descriptivo'],
            popup=False, legend=True, scheme='quantiles',
            legend_kwds={'caption': opcion_seleccionada_nombre},
            style_kwds={'stroke': True, 'color': 'black', 'weight': 0.6},
            tiles="CartoDB positron"
        )
        for idx, row in gdf_filtrado.iterrows():
            centroid = row.geometry.centroid
            folium.Marker(
                location=[centroid.y, centroid.x],
                icon=folium.DivIcon(
                    icon_size=(150,36), icon_anchor=(7,20),
                    html=f'<div style="font-size: 11pt; font-weight: bold; color: #333; text-shadow: 1px 1px 2px white;">{row.seccion}</div>',
                )
            ).add_to(m)
        map_data = st_folium(m, use_container_width=True, height=600)

    # --- Chat con agente ---
    with col_chat:
        col_titulo, col_limpiar = st.columns([3, 1])
        with col_titulo:
            st.subheader("ü§ñ Analista Virtual Estrat√©gico")
        with col_limpiar:
            if st.button("üóëÔ∏è Limpiar Chat", help="Borrar historial de conversaci√≥n"):
                st.session_state.messages = [{"role": "assistant", "content": "Hola, soy tu analista estrat√©gico. ¬øQu√© necesitas evaluar?"}]
                st.rerun()
        
        agente_sql = inicializar_agente(gdf_data)
        if agente_sql:
            if "messages" not in st.session_state:
                st.session_state.messages = [{"role": "assistant", "content": "Hola, soy tu analista estrat√©gico. ¬øQu√© necesitas evaluar?"}]
            
            if len(st.session_state.messages) > 10:
                st.warning("üí° El historial est√° largo. Considera limpiar el chat para mejor rendimiento.")
            
            chat_container = st.container(height=400)
            with chat_container:
                for message in st.session_state.messages:
                    with st.chat_message(message["role"]):
                        st.markdown(message["content"])
            
            if prompt := st.chat_input("Ej: Secciones m√°s competitivas..."):
                st.session_state.messages.append({"role": "user", "content": prompt})
                
                with chat_container:
                    with st.chat_message("user"):
                        st.markdown(prompt)
                    with st.chat_message("assistant"):
                        with st.spinner("üîç Analizando y formulando estrategia..."):
                            response = agente_sql.invoke(prompt)
                            respuesta_texto = response['output']
                            st.markdown(respuesta_texto)
                
                st.session_state.messages.append({"role": "assistant", "content": respuesta_texto})
                st.rerun()

    # --- Panel de detalle ---
    seccion_seleccionada_data = None
    if map_data and map_data.get("last_active_drawing"):
        properties = map_data["last_active_drawing"]["properties"]
        seccion_seleccionada_data = gdf_data[gdf_data['seccion'] == properties['seccion']].iloc[0]
    
    with detalle_placeholder.container():
        if seccion_seleccionada_data is not None:
            seccion_id = seccion_seleccionada_data.get('seccion', 'N/A')
            perfil = seccion_seleccionada_data.get('perfil_descriptivo', 'No disponible')
            partido_dom = seccion_seleccionada_data.get('partido_dominante', 'N/A')
            participacion = seccion_seleccionada_data.get('tasa_participacion_promedio', 0.0)
            voto_morena = seccion_seleccionada_data.get('pct_voto_morena', 0.0)
            voto_oposicion = seccion_seleccionada_data.get('pct_voto_oposicion', 0.0)
            indice_competitividad = seccion_seleccionada_data.get('indice_competitividad', 0.0)
            escolaridad = seccion_seleccionada_data.get('GRAPROES', 0.0)
            digitalizacion = seccion_seleccionada_data.get('indice_digitalizacion', 0.0)
            jovenes = seccion_seleccionada_data.get('porc_jovenes', 0.0)
            adultos_mayores = seccion_seleccionada_data.get('porc_adultos_mayores', 0.0)
            migrantes = seccion_seleccionada_data.get('porc_poblacion_migrante', 0.0)
            hogares_jefa_mujer = seccion_seleccionada_data.get('porc_hogares_jefa_mujer', 0.0)
            sin_servicios_salud = seccion_seleccionada_data.get('porc_sin_servicios_salud', 0.0)
            desocupacion = seccion_seleccionada_data.get('tasa_desocupacion', 0.0)
            
            st.subheader(f"üìç Secci√≥n {seccion_id}")
            st.info(f"**Perfil:** {perfil}")
            
            if isinstance(partido_dom, str) and partido_dom != 'N/A':
                st.metric(label="Partido Dominante", value=partido_dom.title())
            
            st.markdown("### üó≥Ô∏è **Indicadores Electorales**")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    label="Participaci√≥n Electoral",
                    value=f"{participacion:.1f}%",
                    help="Porcentaje de ciudadanos registrados que votan"
                )
                
            with col2:
                st.metric(
                    label="Voto Morena",
                    value=f"{voto_morena:.1f}%",
                    help="Porcentaje hist√≥rico de votos para Morena"
                )
                
            with col3:
                if indice_competitividad >= 80:
                    comp_texto = "üî• MUY Alta"
                    comp_desc = "Campo de batalla electoral"
                elif indice_competitividad >= 60:
                    comp_texto = "‚ö° Alta"
                    comp_desc = "Zona de disputa"
                elif indice_competitividad >= 40:
                    comp_texto = "üü° Media"
                    comp_desc = "Moderadamente disputada"
                else:
                    comp_texto = "üèõÔ∏è Baja"
                    comp_desc = "Secci√≥n consolidada"
                    
                st.metric(
                    label="√çndice de Competitividad",
                    value=comp_texto,
                    help=f"{comp_desc}. Valor calculado: {indice_competitividad:.1f} (0 = no competitivo, 100 = muy competitivo)"
                )
            
            # --- Perfil sociodemogr√°fico ---
            col1, col2 = st.columns(2)
            with col1:
                st.markdown(f"""
                **üìö Educaci√≥n y Tecnolog√≠a**
                - Escolaridad promedio: **{escolaridad:.1f} a√±os**
                - √çndice digitalizaci√≥n: **{digitalizacion:.0f}/100**
                
                **üè† Composici√≥n Poblacional**
                - J√≥venes (18-24): **{jovenes:.1f}%**
                - Adultos mayores (+65): **{adultos_mayores:.1f}%**
                - Poblaci√≥n migrante: **{migrantes:.1f}%**
                """)
            with col2:
                st.markdown(f"""
                **üíº Indicadores Socioecon√≥micos**
                - Hogares con jefa mujer: **{hogares_jefa_mujer:.1f}%**
                - Tasa de desocupaci√≥n: **{desocupacion:.1f}%**
                - Sin servicios de salud: **{sin_servicios_salud:.1f}%**
                
                **‚öñÔ∏è Balance Pol√≠tico**
                - Voto oposici√≥n: **{voto_oposicion:.1f}%**
                """)
            
            # --- Insights r√°pidos ---
            st.markdown("### üéØ **An√°lisis Estrat√©gico R√°pido**")
            insights = []
            if participacion > 70:
                insights.append("üü¢ **Alta participaci√≥n c√≠vica** - Ciudadan√≠a comprometida")
            elif participacion < 50:
                insights.append("üî¥ **Baja participaci√≥n** - Oportunidad de movilizaci√≥n")
            else:
                insights.append("üü° **Participaci√≥n moderada** - Potencial de crecimiento")
                
            if indice_competitividad >= 80:
                insights.append("üî• **Secci√≥n muy competitiva** - Campo de batalla, cada voto cuenta")
            elif indice_competitividad >= 60:
                insights.append("‚ö° **Secci√≥n competitiva** - Zona de disputa electoral")
            elif indice_competitividad <= 30:
                insights.append("üèõÔ∏è **Dominio partidista** - Secci√≥n consolidada")
                
            if digitalizacion > 70:
                insights.append("üì± **Alta conectividad** - Estrategias digitales efectivas")
            elif digitalizacion < 30:
                insights.append("üìª **Baja digitalizaci√≥n** - Enfocar en medios tradicionales")
                
            if jovenes > 25:
                insights.append("üë®‚Äçüéì **Poblaci√≥n joven** - Mensajes de cambio y oportunidad")
            if adultos_mayores > 15:
                insights.append("üë¥ **Poblaci√≥n envejecida** - Mensajes de estabilidad y seguridad")
            if sin_servicios_salud > 20:
                insights.append("üè• **Vulnerabilidad en salud** - Priorizar pol√≠ticas sanitarias")
            
            # CORRECCI√ìN: Esta l√≠nea estaba mal indentada
            for insight in insights:
                st.markdown(f"- {insight}")
                
            # Bot√≥n para an√°lisis detallado
            if st.button(f"üîç An√°lisis Detallado Secci√≥n {seccion_id}", use_container_width=True):
                # Trigger an√°lisis con el chatbot
                consulta_detallada = (
                    f"Analiza en detalle la secci√≥n {seccion_id}, incluyendo fortalezas, "
                    f"debilidades y recomendaciones estrat√©gicas espec√≠ficas"
                )
                st.session_state.messages.append({"role": "user", "content": consulta_detallada})
                
        else:
            st.info("Haz clic en una secci√≥n del mapa para ver sus detalles aqu√≠.")
            st.markdown("""
            ### üí° **C√≥mo usar este panel:**
            1. **Haz clic** en cualquier secci√≥n del mapa
            2. **Visualiza** m√©tricas electorales y sociodemogr√°ficas
            3. **Obt√©n insights** estrat√©gicos autom√°ticos
            4. **Solicita an√°lisis** detallado con el bot√≥n
            
            ### üìä **Variables disponibles:**
            - Indicadores electorales (participaci√≥n, preferencias, **√≠ndice de competitividad**)
            - Demograf√≠a (edad, migraci√≥n, g√©nero)
            - Socioecon√≥micos (educaci√≥n, empleo, salud)
            - Tecnol√≥gicos (digitalizaci√≥n)
            """)
else:
    st.warning("‚ö†Ô∏è No se pudieron cargar los datos.")